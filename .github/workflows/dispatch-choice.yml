name: Release Choice Image
on:
  workflow_dispatch:
    inputs:
      choice_service:
        description: 'Service to build, e.g. abracadabra-web'
        required: true
        default: 'hello'
        type: choice
        options:
          - nginx
          - openjdk
          - nezha-dashboard
          - git-sync
          - ffmpeg-service
          - weread-bot
          - cron
          - vcards
          - certimate
          - mysql-dump
          - dify2openai
          - snell-server
          - one-api
          - env-mock-data
          - abracadabra-web
          - libreoffice-server
          - y-webrtc-signaling
          - watermark
          - request-hub
          - hello
      docker_tags:
        description: 'Docker image tags, e.g. 1.0.0,1.0.1,latest, support multiple tags, default is latest'
        required: false
        type: string
      build_args:
        description: 'Docker build args list, e.g. BUILD_DATE=VERSION=1.0.0,$(date +%Y-%m-%d). If the build args does not contain VCS_REF and BUILD_DATE, it will be added automatically. If the build args does not contain VERSION and the docker_tag is not latest, it will be added automatically.'
        required: false
        type: string
      build_platforms:
        description: 'Docker build platforms, if not specified, default is the service all available platforms, e.g. linux/amd64,linux/arm64,linux/arm/v8,linux/arm/v7,linux/arm/v6,linux/ppc64le,linux/s390x,linux/386,linux/riscv64'
        required: false
        type: string

permissions:
  contents: write
  packages: write

jobs:
  dify2openai_release:
    if: ${{ github.event.inputs.choice_service == 'dify2openai' }}
    uses: ./.github/workflows/release.yml
    with:
      build_context: './Docker/dify2openai'
      docker_image_name: dify2openai
      docker_tags: ${{ github.event.inputs.docker_tags }}
      build_args: ${{ github.event.inputs.build_args }}
      build_platforms: ${{ github.event.inputs.build_platforms || 'linux/amd64,linux/arm64,linux/arm/v6,linux/arm/v7,linux/arm64/v8,linux/ppc64le' }}
    secrets: inherit

  nezha_dashboard_release:
    if: ${{ github.event.inputs.choice_service == 'nezha-dashboard' }}
    uses: ./.github/workflows/release.yml
    with:
      build_context: './Docker/nezha/nezha-dashboard'
      docker_image_name: nezha-dashboard
      docker_tags: ${{ github.event.inputs.docker_tags }}
      build_args: ${{ github.event.inputs.build_args }}
      build_platforms: ${{ github.event.inputs.build_platforms || 'linux/amd64,linux/arm64' }}
    secrets: inherit
  
  vcards_release:
    if: ${{ github.event.inputs.choice_service == 'vcards' }}
    uses: ./.github/workflows/release.yml
    with:
      build_context: './Docker/vcards'
      docker_image_name: vcards
      docker_tags: ${{ github.event.inputs.docker_tags }}
      build_args: ${{ github.event.inputs.build_args }}
      build_platforms: ${{ github.event.inputs.build_platforms || 'linux/amd64,linux/arm64' }}
    secrets: inherit
    
  env_mock_data_release:
    if: ${{ github.event.inputs.choice_service == 'env-mock-data' }}
    uses: ./.github/workflows/release.yml
    with:
      build_context: './Docker/other/env-mock-data'
      docker_image_name: env-mock-data
      docker_tags: ${{ github.event.inputs.docker_tags }}
      build_args: ${{ github.event.inputs.build_args }}
      build_platforms: ${{ github.event.inputs.build_platforms || 'linux/amd64,linux/arm64' }}
    secrets: inherit

  certimate_release:
    if: ${{ github.event.inputs.choice_service == 'certimate' }}
    uses: ./.github/workflows/release.yml
    with:
      build_context: './Docker/certimate'
      docker_image_name: certimate
      docker_tags: ${{ github.event.inputs.docker_tags }}
      build_args: ${{ github.event.inputs.build_args }}
      build_platforms: ${{ github.event.inputs.build_platforms || 'linux/amd64,linux/arm64,linux/arm64/v8' }}
    secrets: inherit

  git_sync_release:
    if: ${{ github.event.inputs.choice_service == 'git-sync' }}
    uses: ./.github/workflows/release.yml
    with:
      build_context: './Docker/git-sync'
      docker_image_name: git-sync
      docker_tags: ${{ github.event.inputs.docker_tags }}
      build_args: ${{ github.event.inputs.build_args }}
      build_platforms: ${{ github.event.inputs.build_platforms || 'linux/amd64,linux/arm64,linux/arm/v7' }}
    secrets: inherit

  ffmpeg_service_release:
    if: ${{ github.event.inputs.choice_service == 'ffmpeg-service' }}
    uses: ./.github/workflows/release.yml
    with:
      build_context: './Docker/ffmpeg-service'
      docker_image_name: ffmpeg-service
      docker_tags: ${{ github.event.inputs.docker_tags }}
      build_args: ${{ github.event.inputs.build_args }}
      build_platforms: ${{ github.event.inputs.build_platforms || 'linux/amd64,linux/arm64,linux/arm/v7' }}
    secrets: inherit

  openjdk_release:
    if: ${{ github.event.inputs.choice_service == 'openjdk' }}
    uses: ./.github/workflows/release.yml
    with:
      build_context: './Docker/openjdk'
      docker_image_name: openjdk
      docker_tags: ${{ github.event.inputs.docker_tags }}
      build_args: ${{ github.event.inputs.build_args }}
      build_platforms: ${{ github.event.inputs.build_platforms || 'linux/amd64,linux/arm64' }}
    secrets: inherit

  mysql_dump_release:
    if: ${{ github.event.inputs.choice_service == 'mysql-dump' }}
    uses: ./.github/workflows/release.yml
    with:
      build_context: './Docker/mysql-dump'
      docker_image_name: mysql-dump
      docker_tags: ${{ github.event.inputs.docker_tags }}
      build_args: ${{ github.event.inputs.build_args }}
      build_platforms: ${{ github.event.inputs.build_platforms || 'linux/amd64,linux/arm64' }}
    secrets: inherit

  cron_release:
    if: ${{ github.event.inputs.choice_service == 'cron' }}
    uses: ./.github/workflows/release.yml
    with:
      build_context: './Docker/cron'
      docker_image_name: cron
      docker_tags: ${{ github.event.inputs.docker_tags }}
      build_args: ${{ github.event.inputs.build_args }}
      build_platforms: ${{ github.event.inputs.build_platforms || 'linux/386,linux/amd64,linux/arm64,linux/arm/v6,linux/arm/v7,linux/arm64/v8,linux/ppc64le,linux/riscv64' }}
    secrets: inherit
    
  one_api_release:
    if: ${{ github.event.inputs.choice_service == 'one-api' }}
    uses: ./.github/workflows/release.yml
    with:
      build_context: './Docker/one-api'
      docker_image_name: one-api
      docker_tags: ${{ github.event.inputs.docker_tags }}
      build_args: ${{ github.event.inputs.build_args }}
      build_platforms: ${{ github.event.inputs.build_platforms || 'linux/amd64' }}
    secrets: inherit

  snell_server_release:
    if: ${{ github.event.inputs.choice_service == 'snell-server' }}
    uses: ./.github/workflows/release.yml
    with:
      build_context: './Docker/snell-server'
      docker_image_name: snell-server
      docker_tags: ${{ github.event.inputs.docker_tags }}
      build_args: ${{ github.event.inputs.build_args }}
      build_platforms: ${{ github.event.inputs.build_platforms || 'linux/amd64,linux/arm64,linux/arm/v7,linux/386' }}
    secrets: inherit

  nginx_release:
    if: ${{ github.event.inputs.choice_service == 'nginx' }}
    uses: ./.github/workflows/release.yml
    with:
      build_context: './Docker/nginx'
      docker_image_name: nginx
      docker_tags: ${{ github.event.inputs.docker_tags }}
      build_args: ${{ github.event.inputs.build_args }}
      build_platforms: ${{ github.event.inputs.build_platforms || 'linux/arm64,linux/386,linux/amd64,linux/arm/v6,linux/arm/v7,linux/arm64/v8' }}
    secrets: inherit  

  abracadabra_web_release:
    if: ${{ github.event.inputs.choice_service == 'abracadabra-web' }}
    uses: ./.github/workflows/release.yml
    with:
      build_context: './Docker/abracadabra-web'
      docker_image_name: abracadabra-web
      docker_tags: ${{ github.event.inputs.docker_tags }}
      build_args: ${{ github.event.inputs.build_args }}
      build_platforms: ${{ github.event.inputs.build_platforms || 'linux/amd64,linux/arm64,linux/arm/v7,linux/arm64/v8,linux/ppc64le,linux/s390x' }}
    secrets: inherit

  watermark_release:
    if: ${{ github.event.inputs.choice_service == 'watermark' }}
    uses: ./.github/workflows/release.yml
    with:
      build_context: './Docker/watermark'
      docker_image_name: watermark
      docker_tags: ${{ github.event.inputs.docker_tags }}
      build_args: ${{ github.event.inputs.build_args }}
      build_platforms: ${{ github.event.inputs.build_platforms || 'linux/amd64,linux/arm64,linux/arm/v7,linux/arm64/v8,linux/ppc64le' }}
    secrets: inherit

  libreoffice_server_release:
    if: ${{ github.event.inputs.choice_service == 'libreoffice-server' }}
    uses: ./.github/workflows/release.yml
    with:
      build_context: './Docker/libreoffice-server'
      docker_image_name: libreoffice-server
      docker_tags: ${{ github.event.inputs.docker_tags }}
      build_args: ${{ github.event.inputs.build_args }}
      build_platforms: ${{ github.event.inputs.build_platforms || 'linux/amd64,linux/arm64' }}
    secrets: inherit

  y_webrtc_signaling_release:
    if: ${{ github.event.inputs.choice_service == 'y-webrtc-signaling' }}
    uses: ./.github/workflows/release.yml
    with:
      build_context: './Docker/y-webrtc-signaling'
      docker_image_name: y-webrtc-signaling
      docker_tags: ${{ github.event.inputs.docker_tags }}
      build_args: ${{ github.event.inputs.build_args }}
      build_platforms: ${{ github.event.inputs.build_platforms || 'linux/amd64,linux/arm64,linux/arm/v7,linux/arm64/v8,linux/ppc64le,linux/s390x' }}
    secrets: inherit

  request_hub_release:
    if: ${{ github.event.inputs.choice_service == 'request-hub' }}
    uses: ./.github/workflows/release.yml
    with:
      build_context: './Docker/request-hub'
      docker_image_name: request-hub
      docker_tags: ${{ github.event.inputs.docker_tags }}
      build_args: ${{ github.event.inputs.build_args }}
      build_platforms: ${{ github.event.inputs.build_platforms || 'linux/386,linux/amd64,linux/arm/v6,linux/arm/v7,linux/arm64/v8,linux/s390x' }}
    secrets: inherit
    
  hello_release:
    if: ${{ github.event.inputs.choice_service == 'hello' }}
    uses: ./.github/workflows/release.yml
    with:
      build_context: './Docker/hello'
      docker_image_name: hello
      docker_tags: ${{ github.event.inputs.docker_tags }}
      build_args: ${{ github.event.inputs.build_args }}
      build_platforms: ${{ github.event.inputs.build_platforms || 'linux/386,linux/amd64,linux/arm64,linux/arm/v7,linux/arm64/v8,linux/ppc64le,linux/s390x' }}
    secrets: inherit

  weread_bot_release:
    if: ${{ github.event.inputs.choice_service == 'weread-bot' }}
    uses: ./.github/workflows/release.yml
    with:
      build_context: './Docker/weread-bot'
      docker_image_name: weread-bot
      docker_tags: ${{ github.event.inputs.docker_tags }}
      build_args: ${{ github.event.inputs.build_args }}
      build_platforms: ${{ github.event.inputs.build_platforms || 'linux/amd64,linux/arm64' }}
    secrets: inherit